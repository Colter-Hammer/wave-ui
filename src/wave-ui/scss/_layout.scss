#{$css-scope} {
  // Layout classes.
  // ----------------------------------------------
  .spacer {flex-grow: 1;}

  .grow {flex-grow: 1;flex-basis: 0;}
  .no-grow {flex-grow: 0;}
  .shrink {flex-shrink: 1;}
  .no-shrink {flex-shrink: 0;}
  .fill-height {height: 100%;}

  .align-start {align-items: flex-start;}
  .align-center {align-items: center;}
  .align-end {align-items: flex-end;}
  .align-self-start {align-self: flex-start;}
  .align-self-center {align-self: center;}
  .align-self-end {align-self: flex-end;}
  .justify-start {justify-content: flex-start;}
  .justify-center {justify-content: center;}
  .justify-end {justify-content: flex-end;}
  .justify-self-start {justify-self: flex-start;}
  .justify-self-center {justify-self: center;}
  .justify-self-end {justify-self: flex-end;}
  .justify-space-between {justify-content: space-between;}

  .text-left {text-align: left;}
  .text-center {text-align: center;}
  .text-right {text-align: right;}
  // ----------------------------------------------

  // Spaces.
  // ----------------------------------------------
  @for $i from 0 through 12 {
    $number: round($i * $base-increment);
    .ma-#{$i} {margin: $number;}
    .mx-#{$i} {margin-left: $number;margin-right: $number;}
    .my-#{$i} {margin-top: $number;margin-bottom: $number;}
    .mt-#{$i} {margin-top: $number;}
    .mr-#{$i} {margin-right: $number;}
    .mb-#{$i} {margin-bottom: $number;}
    .ml-#{$i} {margin-left: $number;}
    .ma-n#{$i} {margin: -$number;}
    .mx-n#{$i} {margin-left: -$number;margin-right: -$number;}
    .my-n#{$i} {margin-top: -$number;margin-bottom: -$number;}
    .mt-n#{$i} {margin-top: -$number;}
    .mr-n#{$i} {margin-right: -$number;}
    .mb-n#{$i} {margin-bottom: -$number;}
    .ml-n#{$i} {margin-left: -$number;}
  }
  .ma-0 {margin: 0;}
  .mx-0 {margin-left: 0;margin-right: 0;}
  .my-0 {margin-top: 0;margin-bottom: 0;}
  .mt-0 {margin-top: 0;}
  .mr-0 {margin-right: 0;}
  .mb-0 {margin-bottom: 0;}
  .ml-0 {margin-left: 0;}

  @for $i from 1 through 12 {
    $number: round($i * $base-increment);
    .pa-#{$i} {padding: $number;}
    .px-#{$i} {padding-left: $number;padding-right: $number;}
    .py-#{$i} {padding-top: $number;padding-bottom: $number;}
    .pt-#{$i} {padding-top: $number;}
    .pr-#{$i} {padding-right: $number;}
    .pb-#{$i} {padding-bottom: $number;}
    .pl-#{$i} {padding-left: $number;}
  }
  .pa-0 {padding: 0;}
  .px-0 {padding-left: 0;padding-right: 0;}
  .py-0 {padding-top: 0;padding-bottom: 0;}
  .pt-0 {padding-top: 0;}
  .pr-0 {padding-right: 0;}
  .pb-0 {padding-bottom: 0;}
  .pl-0 {padding-left: 0;}
  // ----------------------------------------------

  // Sizes.
  // ----------------------------------------------
  // In all the sizes bellow, round(x / 2) * 2 to always have even numbers.
  // Different heights with a mix of odd and even numbers will misalign
  // when verticallly centering (vertical-align or align-items center).
  .size--xs {font-size: round(0.9 * $base-font-size);}
  .size--sm {font-size: round(1.05 * $base-font-size);}
  .size--md {font-size: round(1.15 * $base-font-size);}
  .size--lg {font-size: round(1.4 * $base-font-size);}
  .size--xl {font-size: round(1.7 * $base-font-size);}
  // ----------------------------------------------
}
