{"version":3,"sources":["webpack://WaveUI/./src/documentation/views/ui-components/accordion/api.vue?8281","webpack://WaveUI/src/documentation/views/ui-components/accordion/api.vue","webpack://WaveUI/./src/documentation/views/ui-components/accordion/api.vue?4a33","webpack://WaveUI/./src/documentation/views/ui-components/accordion/api.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","props","propsDescs","slots","events","staticRenderFns","value","color","bgColor","items","itemTitle","itemContent","itemColor","itemClass","titleClass","contentClass","expandIcon","expandIconRight","expandSingle","collapseIcon","shadow","input","focus","data","computed","component"],"mappings":"wIAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,mBAAmBF,EAAG,aAAa,CAACE,YAAY,SAASC,MAAM,CAAC,GAAK,KAAK,CAACP,EAAIQ,GAAG,SAASJ,EAAG,MAAM,CAACE,YAAY,MAAMC,MAAM,CAAC,MAAQP,EAAIS,MAAM,aAAeT,EAAIU,WAAW,MAAQ,WAAWN,EAAG,MAAM,CAACG,MAAM,CAAC,MAAQP,EAAIW,MAAM,MAAQ,WAAWP,EAAG,MAAM,CAACG,MAAM,CAAC,MAAQP,EAAIY,OAAO,MAAQ,aAAa,IAC5aC,EAAkB,G,wBCctB,GACEC,MAAO,wKACPC,MAAO,kRACPC,QAAS,wRACTC,MAAO,icACPC,UAAW,iGACXC,YAAa,mGACbC,UAAW,gKACXC,UAAW,+IACXC,WAAY,oFACZC,aAAc,sFACdC,WAAY,+HACZC,gBAAiB,2FACjBC,aAAc,yOACdC,aAAc,uMACdC,OAAQ,sDAGV,GACE,aAAc,CAAhB,6IACE,eAAgB,CAAlB,0LACE,eAAgB,CAAlB,iJACE,iBAAkB,CAApB,6LAGA,GACEC,MAAO,0PACP,oBAAqB,wPACrBC,MAAO,kFAGT,GACEC,KAAM,WAAR,OACA,aACA,UAGEC,SAAU,CAGRvB,MAHJ,WAIM,OAAO,EAAb,YAEIG,OANJ,WAOM,OAAO,EAAb,iFC3D0X,I,YCOtXqB,EAAY,eACd,EACAlC,EACAc,GACA,EACA,KACA,KACA,MAIa,aAAAoB,E","file":"js/accordion-api-vue.423b402a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"w-divider my12\"}),_c('title-link',{staticClass:\"title1\",attrs:{\"h2\":\"\"}},[_vm._v(\"API\")]),_c('api',{staticClass:\"mt0\",attrs:{\"items\":_vm.props,\"descriptions\":_vm.propsDescs,\"title\":\"Props\"}}),_c('api',{attrs:{\"items\":_vm.slots,\"title\":\"Slots\"}}),_c('api',{attrs:{\"items\":_vm.events,\"title\":\"Events\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\ndiv\n  .w-divider.my12\n  title-link.title1(h2) API\n\n  api.mt0(:items=\"props\" :descriptions=\"propsDescs\" title=\"Props\")\n\n  api(:items=\"slots\" title=\"Slots\")\n\n  api(:items=\"events\" title=\"Events\")\n</template>\n\n<script>\nimport WAccordion from '@/wave-ui/components/w-accordion'\n\nconst propsDescs = {\n  value: 'Provide an array of booleans to dictate the state (expanded and collapsed) of all the accordion items. This value gets updated by the accordion when using a v-model.',\n  color: 'Applies a text color on each accordion item. Accepts all the color names of the color palette, status colors, or custom colors (learn more about the colors in the <a href=\"/colors\">colors</a> knowledge base page).<br>Providing a color hex, rgb(a) or hsl(a) will not work.',\n  bgColor: 'Applies a background color on each accordion item. Accepts all the color names of the color palette, status colors, or custom colors (learn more about the colors in the <a href=\"/colors\">colors</a> knowledge base page).<br>Providing a color hex, rgb(a) or hsl(a) will not work.',\n  items: 'Expecting an array of objects. Each object represent an accordion item and should include a <code>title</code> and <code>content</code> attributes.<br>Alternatively, you can provide an integer number (call it <em class=\"code\">x</em>), to loop through and create <em class=\"code\">x</em> items in the accordion. You can then use the individual slots <code>item-title.x</code> &amp; <code>item-content.x</code> to define each item title and content.',\n  itemTitle: 'Specifies the name of the attribute in each item object where to find the item\\'s title string.',\n  itemContent: 'Specifies the name of the attribute in each item object where to find the item\\'s content string.',\n  itemColor: 'Specifies the name of the attribute in each item object where to find the item\\'s desired color string. This allows a different color for each accordion item.',\n  itemClass: 'Applies a custom CSS class (or space separated classes) on every item container (which includes both the title and the content of the item).',\n  titleClass: 'Applies a custom CSS class (or space separated classes) on every title container.',\n  contentClass: 'Applies a custom CSS class (or space separated classes) on every content container.',\n  expandIcon: 'Specifies the name of the icon to display in the toggle button. If set to false or empty string, the button will be removed.',\n  expandIconRight: 'When set to true, the expand button will be placed at the right end of the item\\'s title.',\n  expandSingle: 'Specifies the accordion behavior, whether only one item can be expanded at a time or multiple. When set to true, expanding another item than the one already expanded is still possible, but it will collapse the other expanded item.',\n  collapseIcon: 'Provide a different icon than the expand icon, to show when the accordion item is expanded. By default and when empty, there is no collapse icon: the expand icon rotates to show a closing ability.',\n  shadow: 'Applies a shadow to the whole accordion container.'\n}\n\nconst slots = {\n  'item-title': { description: 'Provide a custom title for every item. Applies to all the items, but can be overridden by the <code>item-title.x</code> slot.' },\n  'item-title.x': { description: '<em class=\"code\">x</em> is an integer starting at <span class=\"code\">1</span>.<br>Provide a custom title for a single item: the item at the index <em class=\"code\">x</em>.' },\n  'item-content': { description: 'Provide a custom content for every item. Applies to all the items, but can be overridden by the <code>item-content.x</code> slot.' },\n  'item-content.x': { description: '<em class=\"code\">x</em> is an integer starting at <span class=\"code\">1</span>.<br>Provide a custom content for a single item: the item at the index <em class=\"code\">x</em>.' }\n}\n\nconst eventsDescs = {\n  input: 'Emitted each time the state of the accordion changes (when an item is expanded or collapsed). It updates the v-model value in Vue 2.x only.<br>An array of booleans is passed as a parameter (representing the expanded state of every accordion item).',\n  'update:modelValue': 'Emitted each time the state of the accordion changes (when an item is expanded or collapsed). It updates the v-model value in Vue 3 only.<br>An array of booleans is passed as a parameter (representing the expanded state of every accordion item).',\n  focus: 'Emitted on each item title focus. The focused item is returned as a parameter.'\n}\n\nexport default {\n  data: () => ({\n    propsDescs,\n    slots\n  }),\n\n  computed: {\n    // Reads all the props and events directly from the component, so that as soon as a new prop or event\n    // is added it will appear even if no description is yet provided.\n    props () {\n      return WAccordion.props\n    },\n    events () {\n      return WAccordion.emits.reduce((obj, label) => (obj[label] = { description: eventsDescs[label] || '' }) && obj, {})\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./api.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./api.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./api.vue?vue&type=template&id=1ea61b64&lang=pug&\"\nimport script from \"./api.vue?vue&type=script&lang=js&\"\nexport * from \"./api.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}